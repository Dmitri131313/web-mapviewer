version: 0.2

env:
  shell: bash
  variables:
    AWS_DEFAULT_REGION: eu-central-1
  parameter-store:
    AWS_SWISSTOPO_BGDI_ACCOUNT_ID: swisstopo-bgdi_account-id
    AWS_SWISSTOPO_BGDI_DEV_ACCOUNT_ID: swisstopo-bgdi-dev_account-id

phases:

  install:
    runtime-versions:
      nodejs: 14
    commands:
      # updating npm to version 8.x.x (it is not done automatically by settings env to nodejs v14)
      # see package.json for version requirements
      - npm install -g npm@8.4.1
      # npm ci reads only the package-lock.json file (not the package.json) to be sure to have exactly the same libraries
      # that were used last time npm install was done on the developer's device.
      - npm ci

  build:
    commands:
      # will build the application in dev mode before testing
      - npm run test:ci

  post_build:
    commands:
      - echo "CODEBUILD_WEBHOOK_HEAD_REF=${CODEBUILD_WEBHOOK_HEAD_REF} CODEBUILD_WEBHOOK_BASE_REF=${CODEBUILD_WEBHOOK_BASE_REF}"
      - export GITHUB_BRANCH="${CODEBUILD_WEBHOOK_HEAD_REF#refs/heads/}"
      # if this build has been triggered by a push on master (PR merge on master), we deploy on INT (otherwise everything goes to dev)
      - export DEPLOY_TARGET="dev"
      - if [ "${GITHUB_BRANCH}" = "master" ] ; then
          export DEPLOY_TARGET="int";
        fi
      # if we are on DEV, we have to switch to the account "swisstopo-bgdi-dev", otherwise the account is "swisstopo-bgdi"
      - export AWS_ACCOUNT_TO_USE="${AWS_SWISSTOPO_BGDI_DEV_ACCOUNT_ID}:role/BgdiDevCodebuildAccess"
      - if [ "${DEPLOY_TARGET}" = "int" ] ; then
          export AWS_ACCOUNT_TO_USE="${AWS_SWISSTOPO_BGDI_ACCOUNT_ID}:role/BgdiCodebuildAccess";
        fi
      # switching role for deploy (otherwise the S3 bucket won't be visible as it's another account)
      # the application will be built by the npm target before deploying
      - npm run deploy:${DEPLOY_TARGET} -- --role=arn:aws:iam::${AWS_ACCOUNT_TO_USE} --branch=${GITHUB_BRANCH}
